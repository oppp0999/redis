문제점 해결

JWT를 redis에 담기
생성하는 JWT는 만료 시간이 있으므로 Redis는 만료 시간이 지난 데이터를 자동으로 삭제하는 기능을 가지고 있다.
다량의 쓰기와 처리를 할 수 있고 수평적으로 확장 가능
redis는 key-value 스토리지이기에 키가 고유해야한다. 고유한 key를 만들기 위해서 uuid를 키로, 사용자 ID를 값으로 저장



------------------------------------------------------------------------------------
1. 패키지 설치
go get github.com/go-redis/redis/v7
go get github.com/twinj/uuid
이후에 import

2. Redis.go에 저장하여 redis 클라이언트 초기화 -> init()함수에서 초기화 한다.
이렇게 하면 main.go가 실행 될 때마다 redis에 연결된다.
사용자 ID를 클레임으로 사용한 것처럼 토큰 클레임 중 하나로 사용될 UUID 생성

3. 메타데이터 정의 -> 엑세스 토큰, 르프래시 토큰
토큰 정의, 만료 기간 및 UUID를 포함하는 구조체를 정의

4. cretetoken을 수정
액세스 토큰 -> 15분, 리프래시 토큰 -> 7일 만료로 정의
각 토큰에 UUID를 추가한 것을 볼 수 있다.(UUID는 생성될 때마다 고유하므로 사용자는 둘 이상의 토큰을 생성할 수 있다.)
이는 사용자가 다른 기기에 로그인할 때 UUID를 다시 생성해서 Redis에 저장 -> 하나의 기기에서 로그아웃 요청 -> 요청한 기기만 로그아웃

5. JWT 매타데이터의 저장 함수 구현
리프래시 토큰 또는 액세스 토큰의 만료시간이 지나면 도달하면 JWT가 Redis에서 자동으로 삭제

6. login기능 수정
login함수에서 createauth 를 호출
tokens := map[string]string{
		"access_token":  ts.AccessToken,
		"refresh_token": ts.RefreshToken,
	}
을 통해서 다음 토큰들을 redis에 저장할 수 있다.
그리고 redis ui를 통해서 ttl -> 만료기간을 직접 확인할 수 있다.

7. todo 생성
인증이 필요한 요청을 진행
유효성 검사를 통해서 토큰이 위변조 되었는지 확인을 위해 요청 헤더(Request header)에서 토큰을 가져와야함
VerifyToken안에 ExtractToken을 호출합니다. ExtractToken은 토큰을 가져온 다음 signing method를 검증
그런 다음 TokenValid 함수를 사용하여 토큰이 만료가 되었는지 검사
ExtractTokenMetadata 함수는 AccessDetails(구조체)를 반환합니다. 이 구조에는 Redis에서 조회해야 하는 메타데이터(access_uuid, user_id)가 포함
